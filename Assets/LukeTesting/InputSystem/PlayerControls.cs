//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/LukeTesting/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Controls"",
            ""id"": ""ad0c9cd5-6517-4bc6-9a50-890e9846eb50"",
            ""actions"": [
                {
                    ""name"": ""Acceleration"",
                    ""type"": ""Value"",
                    ""id"": ""d091bc05-98cc-496a-bfe4-6941cf44e2f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steering"",
                    ""type"": ""Button"",
                    ""id"": ""af6ed0d1-4391-45a5-a951-e267b84fef2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetPlayer"",
                    ""type"": ""Button"",
                    ""id"": ""de50846d-b4af-488d-a331-1a22d8de9ee8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TailWhipRight"",
                    ""type"": ""Button"",
                    ""id"": ""53383162-447e-4799-84c5-0dc33078d40b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TailWhipLeft"",
                    ""type"": ""Button"",
                    ""id"": ""085c4b4a-05f6-4bb0-8fe2-99b1c139d527"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""16f97ddb-45cf-43fc-8845-03964cec6a46"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""63fd37a9-e9da-4137-9a16-9cb112f9ee9b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""50b31332-db1c-4af9-be4a-5b0b0cd71c1c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""6dac5d7e-21ac-4713-8f4c-0ac96db4be1a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c7c9366e-1193-4fae-b8c4-7aa5f9bd2955"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1e851093-4481-497b-bf65-527a7a9735ea"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fab68641-04e0-4fed-9802-d3f85add8d1d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b9bdff1-bfc5-470f-a9d4-b9640160c933"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TailWhipRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab0b5b9d-a093-4f8d-b6b5-51e58402b7f3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TailWhipLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controls
        m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
        m_Controls_Acceleration = m_Controls.FindAction("Acceleration", throwIfNotFound: true);
        m_Controls_Steering = m_Controls.FindAction("Steering", throwIfNotFound: true);
        m_Controls_ResetPlayer = m_Controls.FindAction("ResetPlayer", throwIfNotFound: true);
        m_Controls_TailWhipRight = m_Controls.FindAction("TailWhipRight", throwIfNotFound: true);
        m_Controls_TailWhipLeft = m_Controls.FindAction("TailWhipLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controls
    private readonly InputActionMap m_Controls;
    private IControlsActions m_ControlsActionsCallbackInterface;
    private readonly InputAction m_Controls_Acceleration;
    private readonly InputAction m_Controls_Steering;
    private readonly InputAction m_Controls_ResetPlayer;
    private readonly InputAction m_Controls_TailWhipRight;
    private readonly InputAction m_Controls_TailWhipLeft;
    public struct ControlsActions
    {
        private @PlayerControls m_Wrapper;
        public ControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Acceleration => m_Wrapper.m_Controls_Acceleration;
        public InputAction @Steering => m_Wrapper.m_Controls_Steering;
        public InputAction @ResetPlayer => m_Wrapper.m_Controls_ResetPlayer;
        public InputAction @TailWhipRight => m_Wrapper.m_Controls_TailWhipRight;
        public InputAction @TailWhipLeft => m_Wrapper.m_Controls_TailWhipLeft;
        public InputActionMap Get() { return m_Wrapper.m_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void SetCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterface != null)
            {
                @Acceleration.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnAcceleration;
                @Acceleration.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnAcceleration;
                @Acceleration.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnAcceleration;
                @Steering.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSteering;
                @Steering.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSteering;
                @Steering.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSteering;
                @ResetPlayer.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnResetPlayer;
                @ResetPlayer.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnResetPlayer;
                @ResetPlayer.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnResetPlayer;
                @TailWhipRight.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnTailWhipRight;
                @TailWhipRight.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnTailWhipRight;
                @TailWhipRight.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnTailWhipRight;
                @TailWhipLeft.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnTailWhipLeft;
                @TailWhipLeft.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnTailWhipLeft;
                @TailWhipLeft.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnTailWhipLeft;
            }
            m_Wrapper.m_ControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Acceleration.started += instance.OnAcceleration;
                @Acceleration.performed += instance.OnAcceleration;
                @Acceleration.canceled += instance.OnAcceleration;
                @Steering.started += instance.OnSteering;
                @Steering.performed += instance.OnSteering;
                @Steering.canceled += instance.OnSteering;
                @ResetPlayer.started += instance.OnResetPlayer;
                @ResetPlayer.performed += instance.OnResetPlayer;
                @ResetPlayer.canceled += instance.OnResetPlayer;
                @TailWhipRight.started += instance.OnTailWhipRight;
                @TailWhipRight.performed += instance.OnTailWhipRight;
                @TailWhipRight.canceled += instance.OnTailWhipRight;
                @TailWhipLeft.started += instance.OnTailWhipLeft;
                @TailWhipLeft.performed += instance.OnTailWhipLeft;
                @TailWhipLeft.canceled += instance.OnTailWhipLeft;
            }
        }
    }
    public ControlsActions @Controls => new ControlsActions(this);
    public interface IControlsActions
    {
        void OnAcceleration(InputAction.CallbackContext context);
        void OnSteering(InputAction.CallbackContext context);
        void OnResetPlayer(InputAction.CallbackContext context);
        void OnTailWhipRight(InputAction.CallbackContext context);
        void OnTailWhipLeft(InputAction.CallbackContext context);
    }
}
